"use strict";define("Test/TestReportingSignalR",["require","exports","VSS/Features/SignalR/3rdParty/jquery.shimmed","VSS/Features/SignalR/Hub","VSS/Platform/Context"],(function(t,e,s,i,a){var n;n=e.TestHubProxies={},(e.TestHubProxies.HubNames||(e.TestHubProxies.HubNames={})).testHub="testHub",e.TestHubProxies.getTestSignalRHubProxyToRegister=function(t){const e=s.jqueryShimmed;return t.server={watchRelease:function(s,i){return t.invoke.apply(t,e.merge(["watchRelease"],e.makeArray(arguments)))},unwatchRelease:function(s,i){return t.invoke.apply(t,e.merge(["unWatchRelease"],e.makeArray(arguments)))},watchBuild:function(s){return t.invoke.apply(t,e.merge(["watchBuild"],e.makeArray(arguments)))},unwatchBuild:function(s){return t.invoke.apply(t,e.merge(["unWatchBuild"],e.makeArray(arguments)))}},t},function(t){e.TestHub={};class s extends i.SignalRHub{constructor(t){super({hostInformation:t.hostInformation,name:n.HubNames.testHub,listener:t.listener,userInactivityTimeoutMs:s.s_userInactivityTimeoutMs}),this._initializeClient=t=>{t.client.testRunStatsChangedForBuild=t=>{this._options&&this._options.notificationSync&&this._options.notificationSync.testRunStatsChangedForBuild(t)},t.client.testRunStatsChangedForRelease=(t,e)=>{this._options&&this._options.notificationSync&&this._options.notificationSync.testRunStatsChangedForRelease(t,e)}},this._options=t,this._watchedBuilds=new Set,this._watchedReleases=new Set,this.initializeProxy(n.getTestSignalRHubProxyToRegister,this._initializeClient)}watchRelease(t,e){const s=`${t}-${e}`;return this._watchedReleases.has(s)&&Promise.resolve(),new Promise(((i,a)=>{this.start().then((()=>{const n=this.hub;n?n.server.watchRelease(t,e).then((()=>{this._watchedReleases.add(s),this._started=!0,i()})).catch((t=>{a(t)})):a("testHub: signalR hub is not initialized")})).catch((t=>{a(t)}))}))}watchBuild(t){return this._watchedBuilds.has(t)&&Promise.resolve(),new Promise(((e,s)=>{this.start().then((()=>{const i=this.hub;i?i.server.watchBuild(t).then((()=>{this._watchedBuilds.add(t),this._started=!0,e()})).catch((t=>{s(t)})):s("testHub: signalR hub is not initialized")})).catch((t=>{s(t)}))}))}unwatchRelease(t,e){const s=this.hub,i=`${t}-${e}`;return new Promise(((a,n)=>{if(!(s&&this._watchedReleases.has(i)&&this._started))return Promise.resolve();s.server.unwatchRelease(t,e).then((()=>{this._watchedReleases.delete(i),a()})).catch((t=>{n(t)}))}))}unwatchBuild(t){const e=this.hub,s=this._watchedBuilds;return new Promise(((i,a)=>{if(!(e&&s.has(t)&&this._started))return Promise.resolve();e.server.unwatchBuild(t).then((()=>{s.delete(t),i()})).catch((t=>{a(t)}))}))}dispose(){this._started&&super.dispose()}}s.s_userInactivityTimeoutMs=36e5;class r extends a.VssService{_serviceStart(t){super._serviceStart(t),r.s_notificationCallBacks=[],r.s_notficationCallBacksLength=0,r.s_testSignalRHub=void 0}_serviceEnd(t){super._serviceEnd(t),r.s_testSignalRHub&&r.s_testSignalRHub.dispose(),r.s_notificationCallBacks=[],r.s_notficationCallBacksLength=0}initialize(t,e,i){return new Promise((async(a,n)=>{const o=t.getService("IVssContributionService"),c=t.getService("IVssPageService").getData(),l=await o.getDataAsync("ms.vss-test-web.test-tab-signalr-data-provider",{},!1);if(!(c&&l&&i&&e))return void n("Invalid parameters.");const u={hostId:c.hostId,isHosted:c.isHosted,hostPath:l.connectionUrl.split("_apis")[0],projectId:e};if(!r.s_testSignalRHub){const t={hostInformation:u,projectId:e,notificationSync:this};r.s_testSignalRHub=new s(t)}r.s_notificationCallBacks.push(i),r.s_notficationCallBacksLength+=1,a()}))}watchRelease(t,e){return r.s_testSignalRHub?r.s_testSignalRHub.watchRelease(t,e):Promise.reject("testHub: TestSignalRHub is not initialized")}watchBuild(t){return r.s_testSignalRHub?r.s_testSignalRHub.watchBuild(t):Promise.reject("testHub: TestSignalRHub is not initialized")}unwatchRelease(t,e){return r.s_testSignalRHub&&1==r.s_notficationCallBacksLength?r.s_testSignalRHub.unwatchRelease(t,e):Promise.resolve()}unwatchBuild(t){return r.s_testSignalRHub&&1==r.s_notficationCallBacksLength?r.s_testSignalRHub.unwatchBuild(t):Promise.resolve()}dispose(){r.s_testSignalRHub&&(r.s_notficationCallBacksLength-=1,r.s_notficationCallBacksLength<=0&&(r.s_testSignalRHub.dispose(),r.s_testSignalRHub=void 0,console.log("testHub: Disconnected")))}testRunStatsChangedForBuild(t){r.s_notificationCallBacks.forEach((e=>{try{e.testRunStatsChangedForBuild(t)}catch(t){console.warn("testHub: Error in calling the callback")}}))}testRunStatsChangedForRelease(t,e){r.s_notificationCallBacks.forEach((s=>{try{s.testRunStatsChangedForRelease(t,e)}catch(t){console.warn("testHub: Error in calling the callback")}}))}}a.Services.add("ITestSignalRHub",{serviceFactory:r})}()}),["TestHubProxies","TestHub"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-test-web.test-reporting-signalr"}}));