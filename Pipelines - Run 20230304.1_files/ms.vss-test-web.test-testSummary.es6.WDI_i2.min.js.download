"use strict";define("Test/TestSummary",["require","exports","react","VSSUI/Util","VSS/Platform/Layout","VSSUI/Icon","VSSUI/VssIcon","VSS/Core/Util/String","VSSUI/TooltipEx","Test/common-util/Common","VSS/Reflux/Action","Test/common-util/Common.Utils","Test/common-util/Telemetry","Test/common-util/TelemetryConstants","VSS/Reflux/Store","VSS/Core/Observable","VSS/Platform/Components/FPSLink","VSS/Platform/Feature","VSSUI/Card","VSSUI/Observer","Test/common-util/TCMPerfScenarios","VSSUI/Accordion"],(function(e,t,s,a,r,n,o,i,u,l,c,d,m,h,p,g,T,S,C,y,_,f){var R,P,b,v,D,N,x,w,F,I,A;R=t.Resources={},t.Resources.RunDurationHeading="Run duration",t.Resources.TestsNotReportedHeading="Tests not reported",t.Resources.TotalTestsText="Total tests",t.Resources.TotalAbortedRunText="Total Aborted Tests",t.Resources.PassPercentHeading="Pass percentage",t.Resources.ErrorFetchingResults="Error occurred while trying to fetch test results data.",t.Resources.TestSummaryTitle="Summary",t.Resources.ResultStateInProgress="InProgress",t.Resources.CommaSeparator=",",t.Resources.TestRunStateCompleted="Test Run Completed",t.Resources.TestRunStateAborted="Test Run Aborted",t.Resources.TestOutcome_NotExecuted="Not executed",t.Resources.ResultStateNotImpacted="Not Impacted",t.Resources.OthersText="Others",t.Resources.TestOutcome_Passed="Passed",t.Resources.TestOutcome_Failed="Failed",t.Resources.TestOutcome_Aborted="Aborted",t.Resources.TestOutcome_Inconclusive="Inconclusive",t.Resources.TestOutcome_None="None",t.Resources.RunsAborted="Run(s) Aborted",t.Resources.TotalTestsHeading="Total tests",t.Resources.FailedTestsHeading="Failed tests",t.Resources.ExistingFailuresLegendText="Existing",t.Resources.PassedText="Passed",t.Resources.FailedText="Failed",t.Resources.PartiallySucceededText="Partially succeeded",t.Resources.PassedOnRerunLegendText="Passed on rerun ({0})",t.Resources.NewFailuresLegendText="New",t.Resources.NotImpactedLegendText="Not Impacted",t.Resources.RunsSummaryStatus="{0} Run(s) Completed ( {1} Passed, {2} Failed )",t.Resources.RunsSummaryStatusWithImpactedAndOtherRuns="{0} Run(s) Completed ( {1} Passed, {2} Failed, {3} Not impacted, {4} Others )",t.Resources.RunsSummaryStatusWithImpactedRunsOnly="{0} Run(s) Completed ( {1} Passed, {2} Failed, {3} Not impacted )",t.Resources.RunsSummaryStatusWithOtherRunsOnly="{0} Run(s) Completed ( {1} Passed, {2} Failed, {3} Others )",t.Resources.TestsTabInBuild="Tests",t.Resources.BuildDoesNotHaveTestReports="No test runs are available for this build. Run tests and get rich reports by using an appropriate built-in task such as the <a class='bolt-link' href='https://go.microsoft.com/fwlink/?linkid=835764' rel='nofollow noopener noreferrer' target='_blank'>Visual Studio Test task</a>. Alternately, run tests using a runner of your choice such as <a class='bolt-link' href='https://junit.org' rel='nofollow noopener noreferrer' target='_blank'>JUnit</a>, <a class='bolt-link' href='https://xunit.github.io/' rel='nofollow noopener noreferrer' target='_blank'>xUnit</a>, <a class='bolt-link' href='https://go.microsoft.com/fwlink/?linkid=2081227' rel='nofollow noopener noreferrer' target='_blank'>mocha, jest, </a><a class='bolt-link' href='https://go.microsoft.com/fwlink/?linkid=2081228' rel='nofollow noopener noreferrer' target='_blank'>pytest, </a><a class='bolt-link' href='https://go.microsoft.com/fwlink/?linkid=2080895' rel='nofollow noopener noreferrer' target='_blank'>rspec, </a>etc. and use the <a class='bolt-link' href='https://go.microsoft.com/fwlink/?LinkId=857107' rel='nofollow noopener noreferrer' target='_blank'>Publish Test Results</a> task to get rich reports.",t.Resources.BuildDetailsSummaryNoTestRuns="No test runs are available for this build. <br>",t.Resources.NoTestsMessageWhileBuildInProgress="Build is in progress. No tests results available at this stage!",t.Resources.BuildHasNotCompletedText="The build is in progress. Test results will appear here when the build completes.",t.Resources.BuildDeletedNoTestResults="No test runs are available for this build as this build has been deleted.",t.Resources.Runs="Runs",t.Resources.NoTestResultsMessage="Test results are not yet available.",t.Resources.RunDurationInfoMessage="Effective run duration for all tests",t.Resources.TestAnalyticsLinkMessage="{0} unique failing {1} in the last 14 days",t.Resources.TestPluralText="tests",t.Resources.TestSingularText="test",t.Resources.ResultsSmallViewStatus="({0} Passed, {1} Failed, {2} Others)",t.Resources.AbortedResultsSmallView="({0} Passed, {1} Failed, {2} Others, {3} Aborted, {4} Not impacted)",t.Resources.FailedResultsSmallView="({0} New, {1} Existing)",function(e){P=t[e]={};class n extends r.VssComponent{render(){let e=[],t=[],r=[];return this.props.legend.forEach((a=>{const n=a.count.toString()+" "+a.label;if(e.push(s.createElement("div",{key:a.label,role:"img","aria-label":n,className:"legend-cell data-count"},a.count)),t.push(s.createElement("div",{key:a.label,"aria-hidden":"true",className:"legend-cell data-color"},this._getLegendCircleElement(a.color))),r.push(s.createElement("div",{key:a.label,"aria-hidden":"true",className:"legend-cell data-value"},a.label)),a.sublabel){const n=a.sublabel;e.push(s.createElement("div",{key:a.sublabel,role:"img","aria-label":n,className:"legend-sub-cell data-count"})),t.push(s.createElement("div",{key:a.sublabel,"aria-hidden":"true",className:"legend-sub-cell data-color"})),r.push(s.createElement("div",{key:a.sublabel,"aria-hidden":"true",className:"legend-sub-cell data-value"},a.sublabel))}})),s.createElement("div",{className:(0,a.css)("donut-legend-container",this.props.cssClass||"")},s.createElement("div",null,e),s.createElement("div",null,t),s.createElement("div",null,r))}_getLegendCircleElement(e){return s.createElement("span",{className:"legend-circle"},s.createElement("svg",{width:"14px",height:"14px"},s.createElement("circle",{className:"color-circle",cx:"7",cy:"7",r:"7",fill:e})))}}t[e].DonutChartLegendComponent=n}("ComponentsDonutChartLegend"),function(e){var l,c,d;b=t[e]={},function(e){e[e.Improved=0]="Improved",e[e.Worsened=1]="Worsened",e[e.Unchanged=2]="Unchanged"}(l=t[e].DifferenceType||(t[e].DifferenceType={})),function(e){e[e.Increased=0]="Increased",e[e.Unchanged=1]="Unchanged",e[e.Decreased=2]="Decreased"}(c=t[e].ValueType||(t[e].ValueType={})),function(e){e[e.String=0]="String",e[e.Percentage=1]="Percentage",e[e.DateTime=2]="DateTime"}(d=t[e].DataType||(t[e].DataType={}));class m extends r.VssComponent{render(){return this.props.isScreenSizeSmall?s.createElement("div",{className:(0,a.css)("flex-grow","flex-row flex-self-start","formatted-summary-string")},s.createElement("div",{className:(0,a.css)("secondary-text summary-line-compact"),id:(0,a.getSafeId)(this.props.title)},this.props.title,":"),s.createElement("div",{className:(0,a.css)("summary-line-smallWindow flex-center flex-column")},this._getChartValueDiv())):s.createElement("div",{className:"testresults-number-chart"},s.createElement("div",{className:"chart-value"},this._getChartValueDiv()),s.createElement("div",{className:"chart-title"},s.createElement("span",null,this.props.title),this.props.infoMessage&&this._getInfoMessageButton()),s.createElement("div",{className:"chart-difference "+(this.props.isVerticalAlignWithDifferencePresent?"chart-difference-show-height":"chart-difference-no-height")},this.props.difference&&this._getDifferenceDiv()))}_getChartValueDiv(){if(null===this.props.dataType)return this.props.value;switch(this.props.dataType){case d.String:return this.props.value;case d.Percentage:return this._getPercentageValueDiv();case d.DateTime:default:return this.props.value}}_getPercentageValueDiv(){return s.createElement("div",null,s.createElement("span",{className:"number-chart-large-font"},i.localeFormat("{0}{1}",this.props.value,"%")))}_getInfoMessageButton(){return s.createElement(u.Tooltip,{text:this.props.infoMessage},(0,n.Icon)({className:"number-chart-info-message-button cursor-pointer",ariaLabel:this.props.infoMessage,iconName:"Info"}))}_getDifferenceDiv(){if(null===this.props.difference)return s.createElement("div",null);let e;switch(this.props.difference.diffType){case l.Improved:e="difference-improved";break;case l.Unchanged:e="difference-unchanged";break;case l.Worsened:e="difference-worsened";break;default:e=""}return s.createElement("div",{className:`${e} chart-difference`},this.props.difference.shouldShowIcon&&this._getIconDiv(),this.props.difference.valueType!==c.Unchanged&&s.createElement("div",{className:"difference-value"},this.props.difference.value))}_getIconDiv(){let e;if(!this.props.difference)return null;switch(this.props.difference.valueType){case c.Unchanged:return null;case c.Increased:e="Up";break;case c.Decreased:e="Down";break;default:return null}return s.createElement("div",{className:"difference-icon-div"},s.createElement(o.VssIcon,{iconName:e}))}}t[e].ResultSummaryNumberChartComponent=m}("ComponentsResultSummaryDetailsChart"),v=t[A="ComponentsTestAnalyticsLink"]={},t[A].getTestAnalyticsLinkData=async function(e,t,s){let a=e.pageContext.getService("IVssContributionService");await a.getContributionAsync("ms.vss-test-analytics-web.failed-tests-metric-view");let r,n=e.pageContext.getService("FailedTestsSourceService");return n&&n.initialize("FailedTestsSourceService",e.pageContext),r=t===l.ViewContext.Build?{contextType:1,definitionId:s}:{contextType:2,definitionId:s},n.getTestAnalyticsLinkData(r)},function(e){t[e]={};t[e].TestResultsReportActionsHub=class{constructor(){this.initializeTestResultSummary=new c.Action,this.initializeTestResultSummaryForUnifiedPipeline=new c.Action,this.refreshTestResultSummary=new c.Action,this.onSummaryLoaded=new c.Action}}}("ActionsTestResultsReportActionsHub"),function(e){D=t[e]={};class s extends p.Store{constructor(e,t,s,a){super(e),this.pageContext=t,this._actionsHub=s,this._viewContextData=a,this._actionsHub.initializeTestResultSummary.addListener(this._initializeTestResultSummaryHandler.bind(this)),this._actionsHub.initializeTestResultSummaryForUnifiedPipeline.addListener(this._initializeTestResultSummaryForUnifiedPipelineHandler.bind(this)),this._actionsHub.refreshTestResultSummary.addListener(this._refreshSummary.bind(this)),this._initialize()}_initialize(){this._setDefaultState()}getState(){return this._state}dispose(){this._actionsHub.initializeTestResultSummary.removeListener(this._initializeTestResultSummaryHandler),this._actionsHub.initializeTestResultSummaryForUnifiedPipeline.removeListener(this._initializeTestResultSummaryForUnifiedPipelineHandler),this._actionsHub.refreshTestResultSummary.removeListener(this._refreshSummary)}getDefinitionId(){if(this._viewContextData.viewContext==l.ViewContext.Build)return this._viewContextData.data.mainData.definition.id;{let e=0;return this._viewContextData&&this._viewContextData.data&&this._viewContextData.data.subData&&this._viewContextData.data.subData.environment&&this._viewContextData.data.subData.environment.releaseDefinition&&(e=this._viewContextData.data.subData.environment.releaseDefinition.id),e}}_setDefaultState(){this._state={shouldShowSummary:!1,totalTestsNumberChartProps:null,totalAbortedTestsNumberChartProps:null,totalTestsChartProps:null,testFailuresChartProps:null,abortedTestsChartProps:null,passPercentageNumberChartProps:null,runDurationNumberChartProps:null,notReportedNumberChartProps:null,errorMessage:null,isInProgressView:null,aggregatedTestsCount:null,aggregatedRunsCount:null,aggregatedRunsOutcomeCount:null,refreshSummary:!1,testAnalyticsLinkData:{},onlyNotReportedTests:!1,summaryAccordianState:!1}}_refreshSummary(){this._state.refreshSummary=!0,this.emitChanged()}_initializeTestResultSummary(e){this._state.isInProgressView=e.viewContextStatus===l.ViewContextStatus.InProgress,this._state.isInProgressView?this._initializeTestResultSummaryForInProgressView(e.summaryData):this._initializeTestResultSummaryForCompletedView(e.summaryData)}_initializeTestResultSummaryForUnifiedPipeline(e){this._state.isInProgressView=e.viewContextStatus===l.ViewContextStatus.InProgress,this._state.isInProgressView?this._initializeTestResultSummaryForInProgressViewInUnifiedPipeline(e.summaryData):this._initializeTestResultSummaryForCompletedViewInUnifiedPipeline(e.summaryData)}_initializeTestResultSummaryHandler(e){this._initializeTestResultSummary(e),this._state.refreshSummary=!1,this.emitChanged()}_initializeTestResultSummaryForUnifiedPipelineHandler(e){this._initializeTestResultSummaryForUnifiedPipeline(e),this._state.refreshSummary=!1,this.emitChanged()}_initializeTestResultSummaryForInProgressViewInUnifiedPipeline(e){let t={totalTests:0,passedTests:0,failedTests:0,notImpactedTests:0,notExecutedTests:0,abortedTests:0,otherTests:0},s={totalRuns:0,inProgressRuns:0,completedRuns:0,abortedRuns:0};if(e&&e.runSummary&&e.runSummary.runSummaryByState){const t=e.runSummary.runSummaryByState;s.inProgressRuns=t[2]?t[2]:0,s.completedRuns=t[3]?t[3]:0,s.completedRuns+=t[6]?t[6]:0,s.abortedRuns=t[4]?t[4]:0,s.totalRuns=e.runSummary.totalRunsCount}if(e&&e.resultSummary&&e.resultSummary.resultSummaryByRunState){const s=e.resultSummary.resultSummaryByRunState;for(let e of Object.keys(s)){const a=s[parseInt(e)];if(a){t.totalTests+=a.totalTestCount;const e=a.aggregatedResultDetailsByOutcome;if(e)for(let s of Object.keys(e)){const a=e[parseInt(s)];switch(a.outcome){case 2:t.passedTests+=a.count;break;case 3:t.failedTests+=a.count;break;case 14:t.notImpactedTests+=a.count;break;case 8:t.notExecutedTests+=a.count;break;case 6:t.abortedTests+=a.count}}}}t.otherTests=t.totalTests-t.passedTests-t.failedTests-t.notImpactedTests-t.notExecutedTests-t.abortedTests}this._updateStateForTestResultSummaryForInProgressView(t,s)}_initializeTestResultSummaryForInProgressView(e){let t={totalTests:0,passedTests:0,failedTests:0,notImpactedTests:0,notExecutedTests:0,abortedTests:0,otherTests:0},s={totalRuns:0,inProgressRuns:0,completedRuns:0,abortedRuns:0};if(e&&e.aggregatedResultsAnalysis&&e.aggregatedResultsAnalysis.runSummaryByState){const a=e.aggregatedResultsAnalysis.runSummaryByState;s.inProgressRuns=a[2]?a[2].runsCount:0,s.completedRuns=a[3]?a[3].runsCount:0,s.completedRuns+=a[6]?a[6].runsCount:0,s.abortedRuns=a[4]?a[4].runsCount:0;for(let e of Object.keys(a)){s.totalRuns+=a[parseInt(e)].runsCount;const r=a[parseInt(e)].resultsByOutcome;r&&(t.totalTests+=this._getAggregatedCount(r),t.passedTests+=r[2]?r[2].count:0,t.failedTests+=r[3]?r[3].count:0,t.notImpactedTests+=r[14]?r[14].count:0,t.notExecutedTests+=r[8]?r[8].count:0,t.abortedTests+=r[6]?r[6].count:0)}t.otherTests=t.totalTests-t.passedTests-t.failedTests-t.notImpactedTests-t.notExecutedTests-t.abortedTests}this._updateStateForTestResultSummaryForInProgressView(t,s)}_updateStateForTestResultSummaryForInProgressView(e,t){t.totalRuns>0&&(this._state.shouldShowSummary=!0),this._state.aggregatedRunsCount={totalRuns:t.totalRuns,inProgressRuns:t.inProgressRuns,completedRuns:t.completedRuns,abortedRuns:t.abortedRuns},this._state.aggregatedTestsCount={totalTests:e.totalTests,passedTests:e.passedTests,failedTests:e.failedTests,notImpactedTests:e.notImpactedTests,notExecutedTests:e.notExecutedTests,abortedTests:e.abortedTests,otherTests:e.otherTests}}_initializeTestResultSummaryForCompletedViewInUnifiedPipeline(e){let t=0,s=0,a="",r=0,n=0,o=0,i=0,u=0,l=0,c=0,p="",g=0,T=0,S=0,C=0,y=0,_=0,f=0,P=0,b=0,v=!1,D=!1,N={totalTests:0,passedTests:0,failedTests:0,notImpactedTests:0,notExecutedTests:0,abortedTests:0,otherTests:0},x={totalRuns:0,inProgressRuns:0,completedRuns:0,abortedRuns:0};if(e&&e.resultSummary&&e.resultSummary.resultSummaryByRunState){for(let t of Object.keys(e.resultSummary.resultSummaryByRunState)){const s=e.resultSummary.resultSummaryByRunState[parseInt(t)];if(s&&(3===parseInt(t)||6===parseInt(t))){y+=s.totalTestCount,i+=s.notReportedTestCount;const e=s.aggregatedResultDetailsByOutcome;if(e)for(let t of Object.keys(e)){const s=e[parseInt(t)];switch(s.outcome){case 2:C+=s.count,l+=s.rerunResultCount;break;case 3:T+=s.count;break;case 14:S+=s.count;break;default:u+=s.count}}}}y>0?this._state.shouldShowSummary=!0:i>0&&(this._state.shouldShowSummary=!0,this._state.onlyNotReportedTests=!0,m.publishEvent(this.pageContext.pageContext,this.pageContext,h.featureTestTab_TestTabWithOnlyNotReportedTests,{NotOnlyReportedTestsCounts:i})),g=y-S,g>0&&(c=C/g*100)}if(e&&e.runSummary&&e.runSummary.runSummaryByState){if(x.abortedRuns=e.runSummary.runSummaryByState[4],x.abortedRuns>0&&e.resultSummary&&e.resultSummary.resultSummaryByRunState){this._state.shouldShowSummary=!0;const t=e.resultSummary.resultSummaryByRunState[4];if(t&&t.aggregatedResultDetailsByOutcome){N.totalTests=t.totalTestCount;const e=t.aggregatedResultDetailsByOutcome;for(let t of Object.keys(e)){const s=e[parseInt(t)];switch(s.outcome){case 2:N.passedTests=s.count;break;case 3:N.failedTests=s.count;break;case 14:N.notImpactedTests=s.count;break;case 6:N.abortedTests=s.count;break;default:N.otherTests+=s.count}}}this._populateStateOfAbortedRuns(N)}if(x.completedRuns+=e.runSummary.runSummaryByState[3]?e.runSummary.runSummaryByState[3]:0,x.completedRuns+=e.runSummary.runSummaryByState[6]?e.runSummary.runSummaryByState[6]:0,x.completedRuns>0&&(this._state.shouldShowSummary=!0),e.runSummary.runSummaryByOutcome){const t=e.runSummary.runSummaryByOutcome;_=t[0]?t[0]:0,f=t[1]?t[1]:0,P=t[2]?t[2]:0,b=t[3]?t[3]:0}e.runSummary.duration&&(p=e.runSummary.duration)}if(e&&e.resultsAnalysis){const i=e.resultsAnalysis.testFailuresAnalysis;i?(D=!0,o=i.newFailures?i.newFailures.count:0,t=i.existingFailures?i.existingFailures.count:0):t=T;const u=e.resultsAnalysis.resultsDifference;u&&(v=!0,a=u.increaseInDuration,n=u.increaseInTotalTests,r=u.increaseInFailures,s=this._getIncreaseInPassPercentageDifference(g,u.increaseInTotalTests-u.increaseInNonImpactedTests,C,u.increaseInPassedTests,c))}this._state.totalTestsNumberChartProps=this._getTotalTestsNumberChartProps(y,n,v),this._state.passPercentageNumberChartProps=this._getPassPercentageNumberChartProps(c,s,v);const w=d.TestReportDataParser.parseDuration(p);this._state.runDurationNumberChartProps={title:R.RunDurationHeading,value:w,difference:v?this._getDurationDifference(a):null,infoMessage:R.RunDurationInfoMessage},this._state.notReportedNumberChartProps={title:R.TestsNotReportedHeading,value:i.toLocaleString(),difference:this._getNullDifference()},this._state.aggregatedRunsOutcomeCount={passed:_,failed:f,notImpacted:P,others:b},this._state.totalTestsChartProps={aggregatedtotalTests:y,totalPassed:C,totalPassedOnRerun:l,totalFailures:T,totalNotImpactedTests:S,otherTests:u},this._state.testFailuresChartProps=D?{totalFailures:T,newFailures:o,existingFailures:t,increaseInFailures:r}:null,this._state.aggregatedRunsCount=x}_initializeTestResultSummaryForCompletedView(e){let t=0,s=0,a=0,r="",n=0,o=0,i=0,u=0,l=0,c=0,p=0,g="",T=0,S=0,C=0,y=0,_=0,f=0,P=0,b=0,v={totalTests:0,passedTests:0,failedTests:0,notImpactedTests:0,notExecutedTests:0,abortedTests:0,otherTests:0},D={totalRuns:0,inProgressRuns:0,completedRuns:0,abortedRuns:0};if(e&&e.aggregatedResultsAnalysis){const R=e.aggregatedResultsAnalysis.resultsByOutcome,v=e.aggregatedResultsAnalysis.notReportedResultsByOutcome;if(Object.keys(R).length>0?this._state.shouldShowSummary=!0:Object.keys(v).length>0&&(this._state.shouldShowSummary=!0,this._state.onlyNotReportedTests=!0,m.publishEvent(this.pageContext.pageContext,this.pageContext,h.featureTestTab_TestTabWithOnlyNotReportedTests,{NotOnlyReportedTestsCounts:Object.keys(v).length})),t=this._getAggregatedCount(R),y=e.aggregatedResultsAnalysis.totalTests,u=this._getAggregatedCount(e.aggregatedResultsAnalysis.notReportedResultsByOutcome),e.aggregatedResultsAnalysis.runSummaryByState&&e.aggregatedResultsAnalysis.runSummaryByState[4]&&(this._state.shouldShowSummary=!0,D.abortedRuns=e.aggregatedResultsAnalysis.runSummaryByState[4].runsCount),R&&R[3]&&(T=R[3].count),e.testFailures){const t=d.TestReportDataParser.parseFailureData(e.testFailures);i=t.newFailures,s=t.existingFailures}else s=T;if(R&&R[2]&&(C=R[2].count,R[2].rerunResultCount&&(c=R[2].rerunResultCount)),y&&(p=C/y*100),e.aggregatedResultsAnalysis.resultsByOutcome[14]&&(S=e.aggregatedResultsAnalysis.resultsByOutcome[14].count),l=t-(C+T+S),g=e.aggregatedResultsAnalysis.duration,e.aggregatedResultsAnalysis.resultsDifference){const t=e.aggregatedResultsAnalysis.resultsDifference;o=t.increaseInOtherTests+t.increaseInFailures+t.increaseInPassedTests,r=t.increaseInDuration,n=t.increaseInFailures,e.testFailures&&(a=this._getIncreaseInPassPercentageDifference(y,t.increaseInTotalTests,C,t.increaseInPassedTests,p))}if(e.aggregatedResultsAnalysis.runSummaryByState){const t=e.aggregatedResultsAnalysis.runSummaryByState;D.completedRuns=t[3]?t[3].runsCount:0}if(e.aggregatedResultsAnalysis.runSummaryByOutcome){const t=e.aggregatedResultsAnalysis.runSummaryByOutcome;_=t[0]?t[0].runsCount:0,f=t[1]?t[1].runsCount:0,P=t[2]?t[2].runsCount:0,b=t[3]?t[3].runsCount:0}}const N=!!e.aggregatedResultsAnalysis.resultsDifference;this._state.totalTestsNumberChartProps=this._getTotalTestsNumberChartProps(t,o,N),this._state.passPercentageNumberChartProps=this._getPassPercentageNumberChartProps(p,a,N);const x=d.TestReportDataParser.parseDuration(g);this._state.runDurationNumberChartProps={title:R.RunDurationHeading,value:x,difference:N?this._getDurationDifference(r):null,infoMessage:R.RunDurationInfoMessage},this._state.notReportedNumberChartProps={title:R.TestsNotReportedHeading,value:u.toLocaleString(),difference:this._getNullDifference()},this._state.aggregatedRunsOutcomeCount={passed:_,failed:f,notImpacted:P,others:b},this._state.totalTestsChartProps={aggregatedtotalTests:t,totalPassed:C,totalPassedOnRerun:c,totalFailures:T,totalNotImpactedTests:S,otherTests:l};const w=!!e.testFailures;if(this._state.testFailuresChartProps=w?{totalFailures:T,newFailures:i,existingFailures:s,increaseInFailures:n}:null,this._state.aggregatedRunsCount=D,D.abortedRuns>0){const t=e.aggregatedResultsAnalysis.runSummaryByState[4].resultsByOutcome;t&&(v.totalTests=this._getAggregatedCount(t),v.passedTests=t[2]?t[2].count:0,v.failedTests=t[3]?t[3].count:0,v.abortedTests=t[6]?t[6].count:0,v.notImpactedTests=t[14]?t[14].count:0,l=v.totalTests-v.passedTests-v.failedTests-v.notImpactedTests-v.abortedTests),this._populateStateOfAbortedRuns(v)}}_populateStateOfAbortedRuns(e){this._state.totalAbortedTestsNumberChartProps=this._getTotalAbortedTestsNumberChartProps(e.totalTests),this._state.abortedTestsChartProps={totalTests:e.totalTests,totalPassed:e.passedTests,totalFailures:e.failedTests,totalAborted:e.abortedTests,totalNotImpactedTests:e.notImpactedTests,otherTests:e.otherTests}}_getTotalTestsNumberChartProps(e,t,s){return{title:R.TotalTestsText,value:e.toLocaleString(),difference:s?this._getTotalTestsDifference(t):null,dataType:b.DataType.String}}_getTotalAbortedTestsNumberChartProps(e){return{title:R.TotalAbortedRunText,value:e.toLocaleString(),difference:null,dataType:b.DataType.String}}_getTotalTestsDifference(e){let t,s;e<0?(t=i.localeFormat("{0}",e.toLocaleString()),s=b.ValueType.Decreased):e>0?(t=i.localeFormat("+{0}",e.toLocaleString()),s=b.ValueType.Increased):(t=i.localeFormat("+{0}",e.toLocaleString()),s=b.ValueType.Unchanged);return{diffType:b.DifferenceType.Unchanged,shouldShowIcon:!1,value:t,valueType:s}}_getPassPercentageNumberChartProps(e,t,s){const a=e===Math.round(e)?e.toString():d.TestReportDataParser.getCustomizedDecimalValueInCurrentLocale(e,2);this._getPassPercentageDifference(t);return{title:R.PassPercentHeading,value:a,difference:s?this._getPassPercentageDifference(t):null,dataType:b.DataType.Percentage}}_getPassPercentageDifference(e){let t,s;const a=Math.abs(e),r=a===Math.round(a)?a.toString():d.TestReportDataParser.getCustomizedDecimalValueInCurrentLocale(a,1),n=i.localeFormat("{0}{1}",r,"%");e<0?(t=b.ValueType.Decreased,s=b.DifferenceType.Worsened):e>0?(t=b.ValueType.Increased,s=b.DifferenceType.Improved):(t=b.ValueType.Unchanged,s=b.DifferenceType.Unchanged);return{diffType:s,shouldShowIcon:!0,value:n,valueType:t}}_getDurationDifference(e){let t;return t=d.TestReportDataParser.isZeroDuration(e)?{value:i.localeFormat("{0}",0),diffType:b.DifferenceType.Unchanged,valueType:b.ValueType.Unchanged,shouldShowIcon:!0}:i.startsWith(e,"-")?{value:i.localeFormat("{0}",d.TestReportDataParser.parseDuration(e)),diffType:b.DifferenceType.Improved,valueType:b.ValueType.Decreased,shouldShowIcon:!0}:{value:i.localeFormat("+{0}",d.TestReportDataParser.parseDuration(e)),diffType:b.DifferenceType.Worsened,valueType:b.ValueType.Increased,shouldShowIcon:!0},t}_getIncreaseInPassPercentageDifference(e,t,s,a,r){const n=e-t;let o=0;return 0!==n&&(o=(s-a)/n*100),r-o}_getNullDifference(){return{value:"",diffType:b.DifferenceType.Unchanged,valueType:b.ValueType.Unchanged,shouldShowIcon:!1}}_getAggregatedCount(e){let t=0;if(e)for(const s of Object.keys(e))t+=e[parseInt(s)].count;return t}}t[e].SummaryViewStore=s}("StoreSummaryViewStore"),function(e){N=t[e]={};class n extends r.VssComponent{constructor(e){super(e),this._paneSize=new g.ObservableValue(void 0),this.state={},this._chartDiameter=100}componentDidMount(){(0,v.getTestAnalyticsLinkData)(this.context,this.props.artifactData.viewContext,this.props.store.getDefinitionId()).then((e=>{this._currentState.testAnalyticsLinkData=e,this.setState(this._currentState)})),this._logTelemetryForClick(),this._getCurrentWidthOfSummary()}componentDidUpdate(){this._getCurrentWidthOfSummary()}render(){return this.props.store&&(this._currentState=this.props.store.getState()),this._getCompletedSummaryViewBody()}_logTelemetryForClick(){let e=this.props.isBuildTimeline?h.featureTestTab_summaryInBuildTimelineRendered:h.featureTestTab_TestTabClicked;this._currentState.totalTestsChartProps&&m.publishEvent(this.context.pageContext,this.props.artifactData,e,{[h.inProgress]:!1,[h.totalTestsExists]:this._currentState.totalTestsChartProps.aggregatedtotalTests>0?"Yes":"No",[h.failedTestsExists]:this._currentState.totalTestsChartProps.totalFailures>0?"Yes":"No",[h.totalTests]:this._currentState.totalTestsChartProps.aggregatedtotalTests,[h.failedTests]:this._currentState.totalTestsChartProps.totalFailures,[h.passedTests]:this._currentState.totalTestsChartProps.totalPassed})}_getSummaryText(){return null!==this._currentState.aggregatedRunsOutcomeCount&&null!==this._currentState.aggregatedRunsCount?0!==this._currentState.aggregatedRunsOutcomeCount.notImpacted&&0!==this._currentState.aggregatedRunsOutcomeCount.others?(0,i.localeFormat)(R.RunsSummaryStatusWithImpactedAndOtherRuns,this._currentState.aggregatedRunsCount.completedRuns,this._currentState.aggregatedRunsOutcomeCount.passed,this._currentState.aggregatedRunsOutcomeCount.failed,this._currentState.aggregatedRunsOutcomeCount.notImpacted,this._currentState.aggregatedRunsOutcomeCount.others):0!==this._currentState.aggregatedRunsOutcomeCount.notImpacted&&0===this._currentState.aggregatedRunsOutcomeCount.others?(0,i.localeFormat)(R.RunsSummaryStatusWithImpactedRunsOnly,this._currentState.aggregatedRunsCount.completedRuns,this._currentState.aggregatedRunsOutcomeCount.passed,this._currentState.aggregatedRunsOutcomeCount.failed,this._currentState.aggregatedRunsOutcomeCount.notImpacted):0===this._currentState.aggregatedRunsOutcomeCount.notImpacted&&0!==this._currentState.aggregatedRunsOutcomeCount.others?(0,i.localeFormat)(R.RunsSummaryStatusWithImpactedAndOtherRuns,this._currentState.aggregatedRunsCount.completedRuns,this._currentState.aggregatedRunsOutcomeCount.passed,this._currentState.aggregatedRunsOutcomeCount.failed,this._currentState.aggregatedRunsOutcomeCount.others):(0,i.localeFormat)(R.RunsSummaryStatus,this._currentState.aggregatedRunsCount.completedRuns,this._currentState.aggregatedRunsOutcomeCount.passed,this._currentState.aggregatedRunsOutcomeCount.failed):""}_getCompletedSummaryViewBody(){(0,S.isFeatureFlagEnabled)(this.context.pageContext,l.FeatureFlagConstants.TriReportCustomization,!1),this._isAnyDifferenceValuePresentInNumberCharts();const e=this._getRequiredDisplaySize();return s.createElement("div",{ref:e=>this._refSummary=e},s.createElement(y.UncheckedObserver,{paneSize:this._paneSize},(t=>{if(void 0===t)return null;{const t=this._paneSize.value,a=this._getCompletedSummaryViewItems(t,e);return s.createElement("div",{className:"summary-view-parent"},this._currentState&&this._currentState.aggregatedRunsCount&&(this._currentState.aggregatedRunsCount.completedRuns>0||this._currentState.aggregatedRunsCount.abortedRuns>0)&&s.createElement("div",{className:"summary-view-container"},s.createElement("div",{className:"summary-view-runs-info-bar"},this._currentState.aggregatedRunsCount&&this._currentState.aggregatedRunsCount.completedRuns>0&&this._currentState.aggregatedRunsOutcomeCount&&s.createElement("div",{className:"summary-view-completed-runs"},this._getSummaryText(),this.state.testAnalyticsLinkData&&this.state.testAnalyticsLinkData.testAnalyticsLinkMessage&&!this.props.isBuildTimeline&&s.createElement(T.FPSLinkComponent,{className:"failing-test-analytics-link",href:this.state.testAnalyticsLinkData.testAnalyticsLink,telemetrySource:h.featureAnalyticsInProductLink_UniqueFailingTests_TestTab,telemetryProperties:this.props.telemetryPropertiesForInProductLink},this.state.testAnalyticsLinkData.testAnalyticsLinkMessage),(0,S.isFeatureFlagEnabled)(this.context.pageContext,l.FeatureFlagConstants.ShowCloudTestLink)&&s.createElement(r.WrappedComponent,{dependencies:["ms.vss-test-web.test-cloud-test-link"],wrappedType:"cloud-test-link",wrappedProps:{artifactData:this.props.artifactData}})),this._currentState.aggregatedRunsCount.abortedRuns>0&&!this._currentState.onlyNotReportedTests&&s.createElement("div",{className:"aborted-view-bar"},this._currentState&&this._currentState.aggregatedRunsCount&&this._currentState.aggregatedRunsCount.completedRuns>0&&s.createElement("div",{className:"aborted-runs-separator-in-bar"}),s.createElement("div",{className:"aborted-runs"},s.createElement("span",{className:"aborted-runs-value"}," ",this._currentState.aggregatedRunsCount.abortedRuns.toLocaleString()," "),R.RunsAborted))),s.createElement(C.Card,{className:"test-summary-card"},s.createElement("div",{className:t>=e?"test-summary-card-row-big":"test-summary-card-row-small"},a.map(((e,t)=>s.createElement("div",{className:"flex-column",style:{minWidth:"50px"},key:t},e)))))))}})))}_getCompletedSummaryViewItems(e,t){const a=this._isAnyDifferenceValuePresentInNumberCharts(),r=(0,S.isFeatureFlagEnabled)(this.context.pageContext,l.FeatureFlagConstants.TriReportCustomization,!1),n=e<t;let o=[];return this._currentState.aggregatedRunsCount&&this._currentState.aggregatedRunsCount.completedRuns>0&&(this._currentState&&this._currentState.totalTestsNumberChartProps&&!this._currentState.onlyNotReportedTests&&(n?this._currentState.totalTestsChartProps&&o.push(this._smallFailedAndPassedData(this._currentState.totalTestsChartProps.aggregatedtotalTests,R.TotalTestsText,[this._currentState.totalTestsChartProps.totalPassed,this._currentState.totalTestsChartProps.totalFailures,this._currentState.totalTestsChartProps.otherTests])):o.push(s.createElement(b.ResultSummaryNumberChartComponent,Object.assign({},this._currentState.totalTestsNumberChartProps,{isVerticalAlignWithDifferencePresent:a})))),!this._currentState||this._currentState.onlyNotReportedTests||n||o.push(s.createElement("div",{className:"separator"})),this._currentState&&this._currentState.totalTestsChartProps&&!this._currentState.onlyNotReportedTests&&!n&&o.push(this._getTotalTestsChart()),this._currentState&&this._currentState.totalTestsChartProps&&this._currentState.testFailuresChartProps&&this._currentState.testFailuresChartProps.totalFailures>0&&!this._currentState.onlyNotReportedTests&&(n?o.push(this._smallFailedAndPassedData(this._currentState.testFailuresChartProps.totalFailures,R.FailedTestsHeading,[this._currentState.testFailuresChartProps.newFailures,this._currentState.testFailuresChartProps.existingFailures])):o.push(this._getFailedTestsChart())),this._currentState&&this._currentState.passPercentageNumberChartProps&&!this._currentState.onlyNotReportedTests&&o.push(s.createElement(b.ResultSummaryNumberChartComponent,Object.assign({},this._currentState.passPercentageNumberChartProps,{isVerticalAlignWithDifferencePresent:a,isScreenSizeSmall:n}))),this._currentState&&this._currentState.runDurationNumberChartProps&&!this._currentState.onlyNotReportedTests&&o.push(s.createElement(b.ResultSummaryNumberChartComponent,Object.assign({},this._currentState.runDurationNumberChartProps,{isVerticalAlignWithDifferencePresent:a,isScreenSizeSmall:n}))),r&&this._currentState&&this._currentState.notReportedNumberChartProps&&o.push(s.createElement(b.ResultSummaryNumberChartComponent,Object.assign({},this._currentState.notReportedNumberChartProps,{isVerticalAlignWithDifferencePresent:a,isScreenSizeSmall:n})))),this._currentState&&this._currentState.aggregatedRunsCount&&this._currentState.aggregatedRunsCount.abortedRuns>0&&!this._currentState.onlyNotReportedTests&&(this._currentState&&this._currentState.aggregatedRunsCount&&this._currentState.aggregatedRunsCount.completedRuns>0&&!n&&o.push(s.createElement("div",{className:"aborted-runs-separator"})),this._currentState&&this._currentState.totalAbortedTestsNumberChartProps&&!n&&o.push(s.createElement(b.ResultSummaryNumberChartComponent,Object.assign({},this._currentState.totalAbortedTestsNumberChartProps,{isVerticalAlignWithDifferencePresent:a}))),this._currentState&&this._currentState.abortedTestsChartProps&&this._currentState.abortedTestsChartProps.totalTests>0&&(!n||this._currentState.totalTestsChartProps&&0==this._currentState.totalTestsChartProps.aggregatedtotalTests&&e>650?o.push(this._getAbortedTestsChart()):o.push(this._smallFailedAndPassedData(this._currentState.abortedTestsChartProps.totalTests,R.TotalAbortedRunText,[this._currentState.abortedTestsChartProps.totalPassed,this._currentState.abortedTestsChartProps.totalFailures,this._currentState.abortedTestsChartProps.otherTests,this._currentState.abortedTestsChartProps.totalAborted,this._currentState.abortedTestsChartProps.totalNotImpactedTests])))),o}_getRequiredDisplaySize(){let e=0;return this._currentState.onlyNotReportedTests||e++,this._currentState.abortedTestsChartProps&&this._currentState.abortedTestsChartProps.totalTests>0&&e++,this._currentState.notReportedNumberChartProps&&this._currentState.notReportedNumberChartProps.value>0&&e++,3==e?1500:2==e?1350:1024}_smallFailedAndPassedData(e,t,r){let n="";return t===R.TotalTestsText&&(n=(0,i.localeFormat)(R.ResultsSmallViewStatus,r[0],r[1],r[2])),t===R.TotalAbortedRunText&&(n=(0,i.localeFormat)(R.AbortedResultsSmallView,r[0],r[1],r[2],r[3],r[4])),t===R.FailedTestsHeading&&(n=(0,i.localeFormat)(R.FailedResultsSmallView,r[0],r[1])),s.createElement("div",{className:(0,a.css)("flex-grow","flex-row flex-self-start","formatted-summary-string")},s.createElement("div",{className:(0,a.css)("secondary-text summary-line-compact"),id:(0,a.getSafeId)(t)},t,":"),s.createElement("div",{className:(0,a.css)("summary-line-smallWindow flex-center flex-column")},e," ",n))}_getCurrentWidthOfSummary(){this._refSummary&&(this._paneSize.value=this._refSummary.clientWidth)}_isAnyDifferenceValuePresentInNumberCharts(){let e=!1;return(this._currentState.totalTestsNumberChartProps&&this._currentState.totalTestsNumberChartProps.difference&&this._currentState.totalTestsNumberChartProps.difference.valueType!==b.ValueType.Unchanged||this._currentState.passPercentageNumberChartProps&&this._currentState.passPercentageNumberChartProps.difference&&this._currentState.passPercentageNumberChartProps.difference.valueType!==b.ValueType.Unchanged||this._currentState.runDurationNumberChartProps&&this._currentState.runDurationNumberChartProps.difference&&this._currentState.runDurationNumberChartProps.difference.valueType!==b.ValueType.Unchanged||this._currentState.totalAbortedTestsNumberChartProps&&this._currentState.totalAbortedTestsNumberChartProps.difference&&this._currentState.totalAbortedTestsNumberChartProps.difference.valueType!==b.ValueType.Unchanged||this._currentState.notReportedNumberChartProps&&this._currentState.notReportedNumberChartProps.difference&&this._currentState.notReportedNumberChartProps.difference.valueType!==b.ValueType.Unchanged)&&(e=!0),e}_getTotalTestsChart(){const e=this._getTotalTestsChartProps();let t=[];t.push({y:this._currentState.totalTestsChartProps.totalPassed,name:R.PassedText,color:l.TestReportColorPalette.Passed}),t.push({y:this._currentState.totalTestsChartProps.totalFailures,name:R.FailedText,color:l.TestReportColorPalette.Failed}),t.push({y:this._currentState.totalTestsChartProps.otherTests,name:R.OthersText,color:l.TestReportColorPalette.OtherOutcome}),t.push({y:this._currentState.totalTestsChartProps.totalNotImpactedTests,name:R.NotImpactedLegendText,color:l.TestReportColorPalette.NotImpacted});let a={width:this._chartDiameter,height:this._chartDiameter},o=[{data:t||[]}];const i=this._getDonutChartLegendProps(e);return s.createElement("div",{className:"summary-view-totaltests-chart"},s.createElement(r.WrappedComponent,{dependencies:["ms.vss-features.vss-charts-common"],wrappedType:"vss-chart",pageContext:this.context.pageContext,hostOptions:a,specializedOptions:{size:"120%",innerSize:"60%",showLabels:!1},title:R.TotalTestsHeading,chartType:"pie",series:o,suppressMargin:!0,suppressAnimation:!0,legend:{enabled:!1},xAxis:{labelFormatMode:"textual",labelValues:n._getXLables(t)}}),s.createElement(P.DonutChartLegendComponent,Object.assign({},i)))}static _getXLables(e){return e?e.map((e=>e.name||"")):[]}_getFailedTestsChart(){const e=this._getFailedTestsChartProps(),t=this._getDonutChartLegendProps(e);let a=[];a.push({y:this._currentState.testFailuresChartProps.newFailures,name:R.NewFailuresLegendText,color:l.TestReportColorPalette.Failed}),a.push({y:this._currentState.testFailuresChartProps.existingFailures,name:R.ExistingFailuresLegendText,color:l.TestReportColorPalette.ExistingFailures});let o={width:this._chartDiameter,height:this._chartDiameter},i=[{name:"FailedTests",data:a||[]}];return s.createElement("div",{className:"summary-view-failedtests-chart"},s.createElement(r.WrappedComponent,{dependencies:["ms.vss-features.vss-charts-common"],wrappedType:"vss-chart",pageContext:this.context.pageContext,hostOptions:o,specializedOptions:{size:"120%",innerSize:"60%",showLabels:!1},title:R.FailedTestsHeading,chartType:"pie",series:i,suppressMargin:!0,suppressAnimation:!0,legend:{enabled:!1},xAxis:{labelFormatMode:"textual",labelValues:n._getXLables(a)}}),s.createElement("div",{className:"failure-chart-legend-area"},this._getFailureChartLabelDiv(e),s.createElement(P.DonutChartLegendComponent,Object.assign({},t))))}_getAbortedTestsChart(){const e=this._getAbortedTestsChartProps(),t=this._getDonutChartLegendProps(e);return s.createElement("div",{className:"summary-view-abortedtests-chart"},s.createElement(P.DonutChartLegendComponent,Object.assign({},t)))}_getDonutChartLegendProps(e){return{legend:e.data.map((e=>({count:e.dataCount.toLocaleString(),label:e.dataValue,color:e.dataColor,sublabel:e.dataSubText})))}}_getFailureChartLabelDiv(e){let t,a,r,n;if(!this._currentState.testFailuresChartProps)return s.createElement("div",null,'"Failure Chart props are empty."');const o=this._currentState.testFailuresChartProps.increaseInFailures;return o>0?(a="failures-increased",t=(0,i.format)("(+{0})",o.toLocaleString()),n="Failures increased by "+o.toLocaleString()):o<0?(a="failures-decreased",t=(0,i.format)("({0})",o.toLocaleString()),n="Failures decreased by "+Math.abs(o).toLocaleString()):(a="failures-unchanged",t="",n="Failures unchanged"),r=e.totalCount.toString()+" "+e.title+" "+n,s.createElement("div",{className:"failure-chart-label-div"},s.createElement("div",{role:"img","aria-label":r,className:"failed-chart-total-count"},e.totalCount),s.createElement("div",{"aria-hidden":"true",className:"failed-chart-title"},e.title),s.createElement("div",{"aria-hidden":"true",className:`${a} failed-chart-test-increment`},t.toLocaleString()))}_getTotalTestsChartProps(){const e={};return this._currentState.totalTestsChartProps?(e.title=R.TotalTestsHeading,e.totalCount=this._currentState.totalTestsChartProps.aggregatedtotalTests,e.data=[],e.data.push({dataValue:R.PassedText,dataCount:this._currentState.totalTestsChartProps.totalPassed,dataColor:l.TestReportColorPalette.Passed,dataSubText:this._currentState.totalTestsChartProps.totalPassedOnRerun>0?(0,i.format)(R.PassedOnRerunLegendText,this._currentState.totalTestsChartProps.totalPassedOnRerun):null}),e.data.push({dataValue:R.FailedText,dataCount:this._currentState.totalTestsChartProps.totalFailures,dataColor:l.TestReportColorPalette.Failed}),e.data.push({dataValue:R.OthersText,dataCount:this._currentState.totalTestsChartProps.otherTests,dataColor:l.TestReportColorPalette.OtherOutcome}),this._currentState.totalTestsChartProps.totalNotImpactedTests>0&&e.data.push({dataValue:R.NotImpactedLegendText,dataCount:this._currentState.totalTestsChartProps.totalNotImpactedTests,dataColor:l.TestReportColorPalette.NotImpacted}),e):e}_getFailedTestsChartProps(){const e={};return this._currentState.testFailuresChartProps?(e.title=R.FailedTestsHeading,e.totalCount=this._currentState.testFailuresChartProps.totalFailures,e.data=[],e.data.push({dataValue:R.NewFailuresLegendText,dataCount:this._currentState.testFailuresChartProps.newFailures,dataColor:l.TestReportColorPalette.Failed}),e.data.push({dataValue:R.ExistingFailuresLegendText,dataCount:this._currentState.testFailuresChartProps.existingFailures,dataColor:l.TestReportColorPalette.ExistingFailures}),e):e}_getAbortedTestsChartProps(){const e={data:[]};return this._currentState.abortedTestsChartProps?(e.data.push({dataValue:R.PassedText,dataCount:this._currentState.abortedTestsChartProps.totalPassed,dataColor:l.TestReportColorPalette.Passed}),e.data.push({dataValue:R.FailedText,dataCount:this._currentState.abortedTestsChartProps.totalFailures,dataColor:l.TestReportColorPalette.Failed}),e.data.push({dataValue:R.TestOutcome_Aborted,dataCount:this._currentState.abortedTestsChartProps.totalAborted,dataColor:l.TestReportColorPalette.AbortedForLegend}),e.data.push({dataValue:R.OthersText,dataCount:this._currentState.abortedTestsChartProps.otherTests,dataColor:l.TestReportColorPalette.OtherOutcome}),this._currentState.abortedTestsChartProps.totalNotImpactedTests>0&&e.data.push({dataValue:R.NotImpactedLegendText,dataCount:this._currentState.abortedTestsChartProps.totalNotImpactedTests,dataColor:l.TestReportColorPalette.NotImpacted}),e):e}}t[e].CompletedSummaryView=n}("ComponentsCompletedSummaryView"),function(e){x=t[e]={};class a extends r.VssComponent{render(){return s.createElement("div",{className:"testresults-colored-number-chart"},s.createElement("div",{className:"chart-value",style:{color:this.props.color}},this.props.value),s.createElement("div",{className:"chart-title-legend"},this._getLegendCircleElement(this.props.color),s.createElement("span",{className:"legend-title"},this.props.title)))}_getLegendCircleElement(e){return s.createElement("span",{className:"legend-circle"},s.createElement("svg",{width:"14px",height:"14px"},s.createElement("circle",{className:"color-circle",cx:"7",cy:"7",r:"7",fill:e})))}}t[e].ResultSummaryColoredNumberChartComponent=a}("ComponentsResultSummaryColoredNumberChart"),function(e){w=t[e]={};class a extends r.VssComponent{constructor(e){super(e),this.state={}}componentDidMount(){(0,v.getTestAnalyticsLinkData)(this.context,this.props.artifactData.viewContext,this.props.store.getDefinitionId()).then((e=>{this._currentState.testAnalyticsLinkData=e,this.setState(this._currentState)})),this._logTelemetryForClick()}render(){return this.props.store&&(this._currentState=this.props.store.getState()),this._getInProgressSummaryViewBody()}_logTelemetryForClick(){let e=this.props.isBuildTimeline?h.featureTestTab_summaryInBuildTimelineRendered:h.featureTestTab_TestTabClicked;this._currentState.aggregatedTestsCount&&m.publishEvent(this.context.pageContext,this.props.artifactData,e,{[h.inProgress]:!0,[h.totalTestsExists]:this._currentState.aggregatedTestsCount.totalTests>0?"Yes":"No",[h.failedTestsExists]:this._currentState.aggregatedTestsCount.failedTests>0?"Yes":"No",[h.totalTests]:this._currentState.aggregatedTestsCount.totalTests,[h.failedTests]:this._currentState.aggregatedTestsCount.failedTests,[h.passedTests]:this._currentState.aggregatedTestsCount.passedTests})}_getInProgressSummaryViewBody(){if(this._currentState&&this._currentState.aggregatedRunsCount)return s.createElement("div",{className:"summary-view-container-parent"},s.createElement("div",{className:"summary-view-container-left"},s.createElement("div",{className:"summary-view-bar-left"},s.createElement("div",{className:"summary-view-bar-icon-run-count"},s.createElement(n.Icon,{iconName:"TestBeaker",className:"summary-view-test-icon"}),s.createElement("div",{className:"run-count-details"},s.createElement("span",{className:"run-count-details-count"},this._currentState.aggregatedRunsCount.totalRuns),s.createElement("span",{className:"run-count-details-name"},R.Runs))),s.createElement("div",{className:"separator-in-bar"})),s.createElement("div",{className:"inprogress-summary-view-body margin-left-side"},s.createElement(b.ResultSummaryNumberChartComponent,{title:R.TotalTestsText,value:null!=this._currentState.aggregatedTestsCount?this._currentState.aggregatedTestsCount.totalTests:0,difference:null,dataType:b.DataType.String,isVerticalAlignWithDifferencePresent:!1}),s.createElement("div",{className:"separator"}))),s.createElement("div",{className:"summary-view-container-right"},s.createElement("div",{className:"summary-view-bar-right"},s.createElement("div",{className:"inprogress-run-details"},s.createElement("span",{className:"inprogress-run-details-count"},this._currentState.aggregatedRunsCount.inProgressRuns),s.createElement("span",{className:"inprogress-run-details-name"},R.ResultStateInProgress)),!!this._currentState.aggregatedRunsCount.completedRuns&&s.createElement("div",{className:"completed-run-details"},s.createElement("span",{className:"comma"},R.CommaSeparator),s.createElement("span",{className:"completed-run-details-count"},this._currentState.aggregatedRunsCount.completedRuns),s.createElement("span",{className:"completed-run-details-name"},R.TestRunStateCompleted)),!!this._currentState.aggregatedRunsCount.abortedRuns&&s.createElement("div",{className:"aborted-run-details"},s.createElement("span",{className:"comma"},R.CommaSeparator),s.createElement("span",{className:"aborted-run-details-count",style:{color:l.TestReportColorPalette.Failed}},this._currentState.aggregatedRunsCount.abortedRuns),s.createElement("span",{className:"aborted-run-details-name"},R.TestRunStateAborted)),this.state.testAnalyticsLinkData&&this.state.testAnalyticsLinkData.testAnalyticsLinkMessage&&!this.props.isBuildTimeline&&s.createElement(T.FPSLinkComponent,{className:"failing-test-analytics-link",href:this.state.testAnalyticsLinkData.testAnalyticsLink,telemetrySource:h.featureAnalyticsInProductLink_UniqueFailingTests_TestTab,telemetryProperties:this.props.telemetryPropertiesForInProductLink},this.state.testAnalyticsLinkData.testAnalyticsLinkMessage),(0,S.isFeatureFlagEnabled)(this.context.pageContext,l.FeatureFlagConstants.ShowCloudTestLink)&&s.createElement(r.WrappedComponent,{dependencies:["ms.vss-test-web.test-cloud-test-link"],wrappedType:"cloud-test-link",wrappedProps:{artifactData:this.props.artifactData}})),s.createElement("div",{className:"inprogress-summary-view-body"},s.createElement(x.ResultSummaryColoredNumberChartComponent,{title:R.TestOutcome_Passed,value:null!=this._currentState.aggregatedTestsCount?this._currentState.aggregatedTestsCount.passedTests:0,color:l.TestReportColorPalette.Passed}),s.createElement(x.ResultSummaryColoredNumberChartComponent,{title:R.TestOutcome_Failed,value:null!=this._currentState.aggregatedTestsCount?this._currentState.aggregatedTestsCount.failedTests:0,color:l.TestReportColorPalette.Failed}),null!=this._currentState.aggregatedTestsCount&&!!this._currentState.aggregatedTestsCount.abortedTests&&s.createElement(x.ResultSummaryColoredNumberChartComponent,{title:R.TestOutcome_Aborted,value:null!=this._currentState.aggregatedTestsCount?this._currentState.aggregatedTestsCount.abortedTests:0,color:l.TestReportColorPalette.Aborted}),s.createElement("div",{className:"donut-chart-legend-container"},this._getDonutChartLegends()))));{let e=this.props.artifactData.data.mainData;if(2!==this.props.artifactData.data.mainData.status&&1!==e.status)return s.createElement("div",null,R.NoTestsMessageWhileBuildInProgress);let t=1===e.definition.type;if(!e.controller&&!t)return s.createElement("div",null,R.BuildDoesNotHaveTestReports);if(1===e.status)return s.createElement("div",null,R.NoTestsMessageWhileBuildInProgress);if(e.deleted)return s.createElement("div",null," ",R.BuildDeletedNoTestResults)}return s.createElement("div",null,R.NoTestResultsMessage)}_getDonutChartLegends(){let e={legend:[]};return this._currentState.aggregatedTestsCount&&(e.legend.push({count:this._currentState.aggregatedTestsCount.notExecutedTests,label:R.TestOutcome_NotExecuted,color:l.TestReportColorPalette.NotExecuted}),this._currentState.aggregatedTestsCount.notImpactedTests&&e.legend.push({count:this._currentState.aggregatedTestsCount.notImpactedTests,label:R.ResultStateNotImpacted,color:l.TestReportColorPalette.NotImpacted}),this._currentState.aggregatedTestsCount.notImpactedTests&&e.legend.push({count:this._currentState.aggregatedTestsCount.notImpactedTests,label:R.ResultStateNotImpacted,color:l.TestReportColorPalette.NotImpacted}),e.legend.push({count:this._currentState.aggregatedTestsCount.otherTests,label:R.OthersText,color:l.TestReportColorPalette.OtherOutcome})),s.createElement(P.DonutChartLegendComponent,Object.assign({},e))}}t[e].InProgressSummaryView=a}("ComponentsInProgressSummaryView"),function(e){F=t[e]={};t[e].TestResultSource=class{constructor(e){this._metricsAPIinunifiedPipeline="WebAccess.TestManagement.UnifiedPipelineMetricsAPI",this._inProgressDPRequestParams={state:"InProgress"},this._completedDPRequestParams={state:"Completed"},this.buildSummaryDataProviderName="ms.vss-test-web.test-tab-build-summary-data-provider",this.pipelineSummaryDataProviderName="ms.vss-test-web.test-tab-unifiedPipeline-summary-data-provider",this.releaseSummaryDataProviderName="ms.vss-test-web.test-tab-release-summary-data-provider",this._pageContext=e.pageContext}getTestReportFromDataProviderAsync(e,t){return new Promise((async(s,a)=>{try{const a=t.pageContext.getService("IVssContributionService");if(e.status===l.ViewContextStatus.InProgress){return s(await a.getDataAsync(this._getDataProviderName(e),this._inProgressDPRequestParams,!0))}const r=a.getData(this._getDataProviderName(e));return this._isDataProviderCacheValid(a,r,e)?s(r):s(await this._refreshAndGetDataProviderCache(a,e))}catch(e){a(e)}}))}getTestReportFromDataProviderForUnifiedPipelineAsync(e,t){return new Promise((async(s,a)=>{try{const a=t.pageContext.getService("IVssContributionService");if(e.status===l.ViewContextStatus.InProgress){return s(await a.getDataAsync(this.pipelineSummaryDataProviderName,this._inProgressDPRequestParams,!0))}const r=a.getData(this.pipelineSummaryDataProviderName);return this._isDataProviderCacheValidForUnifiedPipeline(a,r,e)?s(r):s(await this._refreshAndGetDataProviderCacheForUnifiedPipeline(a,e))}catch(e){a(e)}}))}_isDataProviderCacheValid(e,t,s){return!!t&&((s.viewContext!==l.ViewContext.Build||t.testResultsContext.build.id===s.data.mainData.id)&&((s.viewContext!==l.ViewContext.Release||t.testResultsContext.release.id===s.data.mainData.id&&t.testResultsContext.release.environmentId===s.data.subData.environment.id)&&!e.getData(this._getDataProviderName(s),this._inProgressDPRequestParams)))}_isDataProviderCacheValidForUnifiedPipeline(e,t,s){return!!t&&((s.viewContext!==l.ViewContext.Build||t.currentContext.pipelineId===s.data.mainData.id)&&s.contributionSource===l.ContributionSource.Pipeline&&!e.getData(this.pipelineSummaryDataProviderName,this._inProgressDPRequestParams))}async _refreshAndGetDataProviderCache(e,t){const s=e.getData(this._getDataProviderName(t),this._completedDPRequestParams);return this._isDataProviderCacheValid(e,s,t)?s:await e.getDataAsync(this._getDataProviderName(t),this._completedDPRequestParams,!0)}async _refreshAndGetDataProviderCacheForUnifiedPipeline(e,t){const s=e.getData(this.pipelineSummaryDataProviderName,this._completedDPRequestParams);return this._isDataProviderCacheValidForUnifiedPipeline(e,s,t)?s:await e.getDataAsync(this.pipelineSummaryDataProviderName,this._completedDPRequestParams,!0)}_getDataProviderName(e){return e.viewContext===l.ViewContext.Build?this.buildSummaryDataProviderName:this.releaseSummaryDataProviderName}}}("SourcesTestResultSource"),function(e){I=t[e]={};t[e].TestResultsReportActionsCreator=class{constructor(e,t,s){this._actionHub=e,this._context=t,this._viewContextData=s,this._metricsAPIInUnifiedPipeline="WebAccess.TestManagement.UnifiedPipelineMetricsAPI",this._testResultSource=new F.TestResultSource(t),this._pageContext=t.pageContext}initialize(e){this._shouldUsePipelineAPi(e)?this._testResultSource.getTestReportFromDataProviderForUnifiedPipelineAsync(e,this._context).then((t=>{t?this._invokeActionsForUnifiedPipeline(t,e):(this._actionHub.onSummaryLoaded.invoke({context:e,errorCode:1}),m.publishEvent(this._context.pageContext,this._viewContextData,h.featureTestTab_ErrorInSummaryDataProvider,{DataProviderName:"test-tab-unifiedPipeline-summary-data-provider",reason:"No data returned from the data provider"}))})).catch((t=>{console.error(t),this._actionHub.onSummaryLoaded.invoke({context:e,errorMessage:t,errorCode:2})})):this._testResultSource.getTestReportFromDataProviderAsync(e,this._context).then((t=>{t?this._invokeActions(t,e):(this._actionHub.onSummaryLoaded.invoke({context:e,errorCode:1}),m.publishEvent(this._context.pageContext,this._viewContextData,h.featureTestTab_ErrorInSummaryDataProvider,{DataProviderName:"test-tab-build-summary-data-provider",reason:"No data returned from the data provider"}))})).catch((t=>{console.error(t),this._actionHub.onSummaryLoaded.invoke({context:e,errorMessage:t,errorCode:2})}))}refreshTestResulstsSummary(e){this._shouldUsePipelineAPi(e)?this._testResultSource.getTestReportFromDataProviderForUnifiedPipelineAsync(e,this._context).then((t=>{this._invokeActionsForUnifiedPipeline(t,e)})).catch((t=>{console.error(t),this._actionHub.onSummaryLoaded.invoke({context:e,errorMessage:t,errorCode:2})})):this._testResultSource.getTestReportFromDataProviderAsync(e,this._context).then((t=>{this._invokeActions(t,e)})).catch((t=>{console.error(t),this._actionHub.onSummaryLoaded.invoke({context:e,errorMessage:t,errorCode:2})}))}_invokeActions(e,t){let s=!1;e.totalRunsCount>0&&e.noConfigRunsCount>0&&e.totalRunsCount===e.noConfigRunsCount&&(s=!0),this._checkForData(e)?(this._actionHub.initializeTestResultSummary.invoke({summaryData:e,viewContextStatus:t.status}),this._actionHub.onSummaryLoaded.invoke({context:t,isNoConfigRuns:s})):this._actionHub.onSummaryLoaded.invoke({context:t,errorCode:1,isNoConfigRuns:s})}_invokeActionsForUnifiedPipeline(e,t){let s=!1;e.runSummary&&e.runSummary.noConfigRunsCount>0&&e.runSummary.noConfigRunsCount===e.runSummary.totalRunsCount&&(s=!0),e.runSummary&&e.runSummary.totalRunsCount>0?(this._actionHub.initializeTestResultSummaryForUnifiedPipeline.invoke({summaryData:e,viewContextStatus:t.status}),this._actionHub.onSummaryLoaded.invoke({context:t,isNoConfigRuns:s})):this._actionHub.onSummaryLoaded.invoke({context:t,errorCode:1,isNoConfigRuns:s})}_checkForData(e){return e.aggregatedResultsAnalysis.totalTests>0||this._areThereNotImpactedTests(e)||this._areThereRunsByState(4,e)||this._areThereRunsByState(2,e)||e.totalRunsCount>0}_areThereRunsByState(e,t){return t.aggregatedResultsAnalysis.runSummaryByState&&t.aggregatedResultsAnalysis.runSummaryByState[e]&&t.aggregatedResultsAnalysis.runSummaryByState[e].runsCount>0}_areThereNotImpactedTests(e){return e.aggregatedResultsAnalysis.resultsByOutcome&&e.aggregatedResultsAnalysis.resultsByOutcome[14]&&e.aggregatedResultsAnalysis.resultsByOutcome[14].count>0}_shouldUsePipelineAPi(e){return e.contributionSource===l.ContributionSource.Pipeline&&(0,S.isFeatureFlagEnabled)(this._pageContext,this._metricsAPIInUnifiedPipeline,!1)}}}("ActionsTestResultsReportActionsCreator"),function(e){t.ComponentsSummary={};class a extends r.VssComponent{constructor(e,t){super(e,t),this.onSectionClicked=(e,t)=>{const s=t.isCollapsed;s.value=!s.value;let a=this._summaryViewStore.getState();a.summaryAccordianState=s.value,this.setState(a),this._summaryExpandedOrCollapsedTelemetry(this._testSummaryString,s.value)},this._handleStoreChange=()=>{const e=this._summaryViewStore.getState();e.refreshSummary?this._summaryActionsCreator.refreshTestResulstsSummary(this.props.artifactData):this.setState(e)},this._testSummaryString="TestSummary",this._performanceService=this.context.pageContext.getService("IVssPerformanceService"),this._summaryActionsCreator=new I.TestResultsReportActionsCreator(this.props.actionsHub,t,this.props.artifactData),this._summaryViewStore=new D.SummaryViewStore("TestTabInBuildComponent",t,this.props.actionsHub,this.props.artifactData),this.state=this._summaryViewStore.getState()}componentDidUpdate(e){(0,d.hasArtifactChanged)(this.props.artifactData,e.artifactData)&&this._summaryActionsCreator.initialize(this.props.artifactData)}componentDidMount(){this._summaryViewStore.addChangedListener(this._handleStoreChange),this._summaryActionsCreator.initialize(this.props.artifactData);let e=this.props.artifactData.contributionSource;e!==l.ContributionSource.Build&&e!==l.ContributionSource.Pipeline||this._performanceService.addSplitTiming(_.TestSummaryLoaded,e)}componentWillUnmount(){this._summaryViewStore.removeChangedListener(this._handleStoreChange),this._summaryViewStore.dispose()}render(){if(!this.state.shouldShowSummary)return null;const e=this.state.isInProgressView?s.createElement(w.InProgressSummaryView,{store:this._summaryViewStore,artifactData:this.props.artifactData,telemetryPropertiesForInProductLink:this._getTelemetryPropertiesForInProductLink()}):s.createElement(N.CompletedSummaryView,{store:this._summaryViewStore,artifactData:this.props.artifactData,telemetryPropertiesForInProductLink:this._getTelemetryPropertiesForInProductLink()}),t=[{isCollapsed:new g.ObservableValue(this.state.summaryAccordianState),key:this._testSummaryString,title:R.TestSummaryTitle,onRenderContent:()=>e}];let a=this.props.artifactData.contributionSource===l.ContributionSource.Pipeline?"test-results-summary-view pipeline-summary":"test-results-summary-view";return s.createElement("div",{className:a},s.createElement("div",{className:"test-summary-view depth-8"},s.createElement(f.Accordion,{sections:t,className:"summary-accordion",onSectionClicked:this.onSectionClicked})))}_summaryExpandedOrCollapsedTelemetry(e,t){e==this._testSummaryString&&m.publishEvent(this.context.pageContext,this.props.artifactData,h.featureTestTab_SummaryExpandCollapseClicked,{State:t})}_getTelemetryPropertiesForInProductLink(){return{[h.workflow]:l.ViewContext[this.props.artifactData.viewContext].toString(),[h.id]:this.props.artifactData.data.mainData.id.toString()}}}t.ComponentsSummary.Summary=a}()}),["Resources","Components/DonutChartLegend","Components/ResultSummaryDetailsChart","Components/TestAnalyticsLink","Actions/TestResultsReportActionsHub","Store/SummaryViewStore","Components/CompletedSummaryView","Components/ResultSummaryColoredNumberChart","Components/InProgressSummaryView","Sources/TestResultSource","Actions/TestResultsReportActionsCreator","Components/Summary"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-test-web.test-testSummary"}}));